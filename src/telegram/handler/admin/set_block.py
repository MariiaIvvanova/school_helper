from datetime import datetime

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from src.db.model.constants import UserRole
from src.db.repository.UsersRepository import UsersRepository
from src.service.UsersService import UsersService
from src.telegram.middleware.check_block import check_blocked
from src.telegram.middleware.check_message import check_message_not_empty
from src.telegram.middleware.check_register import check_register
from src.telegram.middleware.check_role import check_role
from src.db.connect import get_session


@check_blocked()
@check_register()
@check_role([UserRole.ADMIN])
@check_message_not_empty
async def block_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = " ".join(update.message.text.replace("/set_block", "").split()).strip()

    session = get_session()
    user_repo = UsersRepository(session)
    users_service = UsersService(user_repo)

    user = user_repo.get_by_user_name(user_name)
    if not user:
        await update.message.reply_text(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
        )
        return

    if user.is_block:
        result = users_service.block_user(user_name, False)
        if result:
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n"
                f"üë§ <b>{user_name}</b>\n"
                f"üÜî ID: <code>{user.id}</code>\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.create_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚è± –î–∞—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_name}</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
            )
        return

    else:
        result = users_service.block_user(user_name, True)
        if result:
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n"
                f"üë§ <b>{user_name}</b>\n"
                f"üÜî ID: <code>{user.id}</code>\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.create_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚è± –î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_name}</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
            )
        return
